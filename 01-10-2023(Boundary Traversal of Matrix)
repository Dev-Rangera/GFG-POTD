
class Solution
{   
    public:
    //Function to return list of integers that form the boundary 
    //traversal of the matrix in a clockwise manner.
    vector<int> boundaryTraversal(vector<vector<int> > matrix, int n, int m) 
    {
        // code here
        // vector<int>v;
        // if(m==1)
        // {
        //     for(int i = 0;i<m;i++)
        //     {
        //         v.push_back(matrix[i][0]);
        //     }
        // }
        // else if(n == 1)
        // {
        //     for(int j=0;j<n;j++)
        //     {
        //         v.push_back(matrix[0][j]);
        //     }
        // }
        // else 
        // {
        //     for(int i = 0;i<m;i++)
        //     {
        //         v.push_back(matrix[0][i]);
        //     }
        //     for(int i = 1;i<n;i++)
        //     {
        //         v.push_back(matrix[i][m-1]);
        //     }
        //     for(int i = m-2;i>=0;i--)
        //     {
        //         v.push_back(matrix[n-1][i]);
        //     }
        //     for(int i = n-2;i>0;i--)
        //     {
        //         v.push_back(matrix[i][0]);
        //     }
        // }
        // return v;
        vector<int> sol;
        if(n==1)
        {
            for(int i=0;i<m;i++)
            sol.push_back(matrix[0][i]);
        }
        else if(m==1)
        {
            for(int i=0;i<n;i++)
            sol.push_back(matrix[i][0]);
        }
        else
        {
            for(int i=0;i<m;i++)
            sol.push_back(matrix[0][i]);
            for(int j=1;j<n;j++)
            sol.push_back(matrix[j][m-1]);
            for(int i=m-2;i>=0;i--)
            sol.push_back(matrix[n-1][i]);
            for(int k=n-2;k>0;k--)
            sol.push_back(matrix[k][0]);
        }
        return sol;
    }
};
